#!/usr/bin/env python3
import os
import shutil
import sys
from generators.namegen import *
from namegen_helper import namegen_helper
import argparse
from pathlib import Path

# Attempts to import the names dict. If there is a syntax error in the dict, instead offers to restore the default dict.
try:
    from archive.names import *
except SyntaxError:
    match input(
        "There's an error with the names dict! Would you like to restore the default dict?"
    ).lower():
        case "y" | "yes":
            namespath = Path("__file__").parent / Path("archive/names.py")
            defaultpath = Path("__file__").parent / Path("archive/defaultnames.py")
            os.replace(defaultpath, namespath)
            shutil.copyfile(namespath, defaultpath)
        case "n" | "no":
            print("Exiting.")


def main():
    """Call name_collector, return two lists, then input them to name_stitcher to return the final names."""
    print("Generating name lists...")
    try:
        first_names, surnames = name_collector(abs(int(args.raws)))
    except ValueError:
        print("Please input a number for the raws flag!")
        sys.exit(1)
    print("Stitching names...")
    try:
        names = name_stitcher(first_names, surnames, abs(int(args.names)))
    except ValueError:
        print("Please input a number for the names flag!")
        sys.exit(1)
    print("\n".join(sorted(names)))


if __name__ == "__main__":
    # Sets up command line arguments and documentation.
    parser = argparse.ArgumentParser(
        prog="sampogen",
        description="A simple but robust procedural name generator, with command line manager app.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "-r",
        "--raws",
        default=100,
        help="Amount of first names and surnames to generate, which will be drawn from to create the full names.",
    )
    parser.add_argument(
        "-n",
        "--names",
        default=10,
        help="Amount of full names to create using the raw lists.",
    )
    parser.add_argument(
        "-m",
        "--manager",
        default=False,
        action="store_true",
        help="Run the manager tool, allowing you to edit the structures and sets.",
    )
    args = parser.parse_args()
    # If the flag to run the manager is given, runs the manager, otherwise runs the main function to generate names.
    if args.manager:
        namegen_helper()
    else:
        main()
